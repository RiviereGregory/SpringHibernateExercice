// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package fr.treeptik.springhibernateexercice.builder;

import fr.treeptik.springhibernateexercice.model.Address;
import fr.treeptik.springhibernateexercice.model.Department;
import fr.treeptik.springhibernateexercice.model.Employee;
import fr.treeptik.springhibernateexercice.model.Phone;
import fr.treeptik.springhibernateexercice.model.Phone.PhoneType;
import fr.treeptik.springhibernateexercice.model.Project;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class EmployeeBuilder extends EmployeeBuilderBase<EmployeeBuilder> {
	public static EmployeeBuilder employee() {
		return new EmployeeBuilder();
	}

	public EmployeeBuilder() {
		super(new Employee());
	}

	public Employee build() {
		return getInstance();
	}
}

class EmployeeBuilderBase<GeneratorT extends EmployeeBuilderBase<GeneratorT>> {
	private Employee instance;

	protected EmployeeBuilderBase(Employee aInstance) {
		instance = aInstance;
	}

	protected Employee getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withPhones(List<Phone> aValue) {
		instance.setPhones(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedPhone(Phone aValue) {
		if (instance.getPhones() == null) {
			instance.setPhones(new ArrayList<Phone>());
		}

		((ArrayList<Phone>) instance.getPhones()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedPhonePhoneBuilder withAddedPhone() {
		Phone obj = new Phone();

		withAddedPhone(obj);

		return new AddedPhonePhoneBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withProjects(List<Project> aValue) {
		instance.setProjects(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedProject(Project aValue) {
		if (instance.getProjects() == null) {
			instance.setProjects(new ArrayList<Project>());
		}

		((ArrayList<Project>) instance.getProjects()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedProjectProjectBuilder withAddedProject() {
		Project obj = new Project();

		withAddedProject(obj);

		return new AddedProjectProjectBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withId(Integer aValue) {
		instance.setId(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withName(String aValue) {
		instance.setName(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withSalary(Long aValue) {
		instance.setSalary(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withStartDate(Date aValue) {
		instance.setStartDate(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddress(Address aValue) {
		instance.setAddress(aValue);

		return (GeneratorT) this;
	}

	public AddressAddressBuilder withAddress() {
		Address obj = new Address();

		withAddress(obj);

		return new AddressAddressBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withDepartment(Department aValue) {
		instance.setDepartment(aValue);

		return (GeneratorT) this;
	}

	public DepartmentDepartmentBuilder withDepartment() {
		Department obj = new Department();

		withDepartment(obj);

		return new DepartmentDepartmentBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withManager(Employee aValue) {
		instance.setManager(aValue);

		return (GeneratorT) this;
	}

	public ManagerEmployeeBuilder withManager() {
		Employee obj = new Employee();

		withManager(obj);

		return new ManagerEmployeeBuilder(obj);
	}

	public class AddedPhonePhoneBuilder extends PhoneBuilderBase<AddedPhonePhoneBuilder> {
		public AddedPhonePhoneBuilder(Phone aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endPhone() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public class AddedProjectProjectBuilder extends ProjectBuilderBase<AddedProjectProjectBuilder> {
		public AddedProjectProjectBuilder(Project aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endProject() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public class AddressAddressBuilder extends AddressBuilderBase<AddressAddressBuilder> {
		public AddressAddressBuilder(Address aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endAddress() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public class DepartmentDepartmentBuilder extends
			DepartmentBuilderBase<DepartmentDepartmentBuilder> {
		public DepartmentDepartmentBuilder(Department aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endDepartment() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public class ManagerEmployeeBuilder extends EmployeeBuilderBase<ManagerEmployeeBuilder> {
		public ManagerEmployeeBuilder(Employee aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endManager() {
			return (GeneratorT) EmployeeBuilderBase.this;
		}
	}

	public static class DepartmentBuilderBase<GeneratorT extends DepartmentBuilderBase<GeneratorT>> {
		private Department instance;

		protected DepartmentBuilderBase(Department aInstance) {
			instance = aInstance;
		}

		protected Department getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}
	}

	public static class ProjectBuilderBase<GeneratorT extends ProjectBuilderBase<GeneratorT>> {
		private Project instance;

		protected ProjectBuilderBase(Project aInstance) {
			instance = aInstance;
		}

		protected Project getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withEmployees(List<Employee> aValue) {
			instance.setEmployees(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedEmployee(Employee aValue) {
			if (instance.getEmployees() == null) {
				instance.setEmployees(new ArrayList<Employee>());
			}

			((ArrayList<Employee>) instance.getEmployees()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedEmployeeEmployeeBuilder withAddedEmployee() {
			Employee obj = new Employee();

			withAddedEmployee(obj);

			return new AddedEmployeeEmployeeBuilder(obj);
		}

		public class AddedEmployeeEmployeeBuilder extends
				EmployeeBuilderBase<AddedEmployeeEmployeeBuilder> {
			public AddedEmployeeEmployeeBuilder(Employee aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endEmployee() {
				return (GeneratorT) ProjectBuilderBase.this;
			}
		}
	}

	public static class AddressBuilderBase<GeneratorT extends AddressBuilderBase<GeneratorT>> {
		private Address instance;

		protected AddressBuilderBase(Address aInstance) {
			instance = aInstance;
		}

		protected Address getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withCity(String aValue) {
			instance.setCity(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withState(String aValue) {
			instance.setState(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStreet(String aValue) {
			instance.setStreet(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withZip(String aValue) {
			instance.setZip(aValue);

			return (GeneratorT) this;
		}
	}

	public static class PhoneBuilderBase<GeneratorT extends PhoneBuilderBase<GeneratorT>> {
		private Phone instance;

		protected PhoneBuilderBase(Phone aInstance) {
			instance = aInstance;
		}

		protected Phone getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Long aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNumber(String aValue) {
			instance.setNumber(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withType(PhoneType aValue) {
			instance.setType(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withEmployee(Employee aValue) {
			instance.setEmployee(aValue);

			return (GeneratorT) this;
		}

		public EmployeeEmployeeBuilder withEmployee() {
			Employee obj = new Employee();

			withEmployee(obj);

			return new EmployeeEmployeeBuilder(obj);
		}

		public class EmployeeEmployeeBuilder extends EmployeeBuilderBase<EmployeeEmployeeBuilder> {
			public EmployeeEmployeeBuilder(Employee aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endEmployee() {
				return (GeneratorT) PhoneBuilderBase.this;
			}
		}
	}
}
